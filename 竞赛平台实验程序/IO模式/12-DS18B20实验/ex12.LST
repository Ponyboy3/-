C51 COMPILER V9.59.0.0   EX12                                                              04/13/2022 14:07:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE EX12
OBJECT MODULE PLACED IN ex12.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ex12.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*******************************************************************************
   2          * 文件名称：DS18B20温度传感器实验
   3          * 实验目的：1.掌握单总线通讯基本特点和工作时序
   4          *           2.掌握51单片机模拟单总线时序的程序设计方法
   5          *           3.掌握DS18B20温度传感器的操作方法
   6          * 实验配置：J3跳线配置为IO方式，J5配置为BTN、J2配置为1-3和2-4
   7          * 程序现象：用手触摸温度传感器，数码管显示有变化
   8          * 硬件说明：IAP15F2K61S2@11.0592MHz
   9          * 注意事项：测量精度为1摄氏度
  10          * 日期版本：2022/02/08
  11          *******************************************************************************/
  12          
  13          #include "reg52.h"  //定义51单片机特殊功能寄存器
  14          #include "onewire.h"  //单总线函数库
  15          #include "absacc.h"
  16          
  17          sfr AUXR = 0x8E;
  18          
  19          code unsigned char tab[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0xff};
  20          unsigned char dspbuf[8] = {10, 10, 10, 10, 10, 10, 10, 10}; //显示缓冲区
  21          
  22          bit temper_flag = 0;//温度读取标志
  23          //函数声明
  24          /**********************************/
  25          void display(void);
  26          void cls_buzz();
  27          void cls_led();
  28          /**********************************/
  29          
  30          //主函数
  31          void main(void)
  32          {
  33   1          unsigned char temperature;
  34   1          cls_buzz();
  35   1          cls_led();
  36   1          AUXR |= 0x80;
  37   1          TMOD &= 0xF0;
  38   1          TL0 = 0xCD; //1ms,1Tmoshi
  39   1          TH0 = 0xD4;
  40   1          TF0 = 0;
  41   1          TR0 = 1;
  42   1          ET0 = 1;
  43   1          EA = 1;
  44   1      
  45   1          while(1)
  46   1          {
  47   2              if(temper_flag)
  48   2              {
  49   3                  temper_flag = 0;
  50   3                  temperature = rd_temperature();  //读温度
  51   3              }
  52   2      
  53   2              //显示数据更新
  54   2              (temperature >= 10) ? (dspbuf[6] = temperature / 10) : (dspbuf[6] = 10);
  55   2              dspbuf[7] = temperature % 10;
C51 COMPILER V9.59.0.0   EX12                                                              04/13/2022 14:07:50 PAGE 2   

  56   2          }
  57   1      }
  58          
  59          //定时器中断服务函数
  60          void isr_timer_0(void)  interrupt 1  //默认中断优先级 1
  61          {
  62   1          static unsigned char intr;
  63   1          if(++intr == 50)  //1ms执行一次
  64   1          {
  65   2              intr = 0;
  66   2              temper_flag = 1;  //50ms温度读取标志位置1
  67   2          }
  68   1          display();
  69   1      }
  70          
  71          void cls_buzz()
  72          {
  73   1          P2 = ((P2 & 0x1f) | 0xA0);
  74   1          P0 = 0x00;
  75   1          P2 &= 0x1f;
  76   1      }
  77          void cls_led()
  78          {
  79   1          P2 = ((P2 & 0x1f) | 0x80);
  80   1          P0 = 0xFF;
  81   1          P2 &= 0x1f;
  82   1      }
  83          
  84          //显示函数
  85          void display(void)
  86          {
  87   1          static unsigned char dspcom = 0;
  88   1          P2 = ((P2 & 0x1f) | 0xE0); //段选573
  89   1          P0 = 0xff;               //消隐段码
  90   1          P2 &= 0x1f;
  91   1      
  92   1          P0 = 1 << dspcom;        //循环位选
  93   1          P2 = ((P2 & 0x1f) | 0xC0); //位选573
  94   1          P2 &= 0x1f;
  95   1      
  96   1          P0 = tab[dspbuf[dspcom]];//显示段码
  97   1          P2 = ((P2 & 0x1f) | 0xE0); //段选573
  98   1          P2 &= 0x1f;
  99   1      
 100   1          if(++dspcom == 8)
 101   1          {
 102   2              dspcom = 0;
 103   2          }
 104   1      }
 105          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    246    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
