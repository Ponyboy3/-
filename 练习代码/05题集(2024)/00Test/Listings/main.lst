C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "reg52.h"
   2          #include "iic.h"
   3          
   4          #define uchar unsigned char 
   5          #define uint unsigned int
   6          
   7          // 数码管显示数据， 一般前10个为0-9， 可更具需要往里面添加
   8          uchar code type1[] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xff,0xbf,0x8e,0xc8,0xc1};
   9          // 数码管
  10          uchar code type2[] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  11          
  12          uchar num1,num2,num3,num4,num5,num6,num7,num8;  // 数码管每一位（例如 num1 = 2, 第一个数码管显示 2）
  13          uchar GN;  // 按键标志位
  14          bit f_2ms, f_50ms;  // 2ms, 50ms标志位
  15          uchar temp_Led_P0 = 0xff;  // 用来存上一次LED状态
  16          
  17          sbit S7 = P3^0;
  18          sbit S6 = P3^1;
  19          sbit S5 = P3^2;
  20          sbit S4 = P3^3;
  21          
  22          sbit L0 = P0^0;
  23          sbit L1 = P0^1;
  24          sbit L2 = P0^2;
  25          sbit L3 = P0^3;
  26          sbit L4 = P0^4;
  27          sbit L5 = P0^5;
  28          sbit L6 = P0^6;
  29          
  30          // =========================================== 代码开始 ======================================
  31          bit f_1s;  // 1s标志位
  32          
  33          uint num_2ms = 0, num_s = 0;  // 多少个2ms, 1s
  34          unsigned char dat1 = 0,dat2 = 0,dat3 = 0;
  35          // =========================================== 代码结束 ======================================
  36          
  37          
  38          //=========================================普通延时函数(模板函数)=================================
  39          void Delay(uint t) {
  40   1              while( t -- );
  41   1              while( t -- );
  42   1      }
  43          //=======================================单个LED控制函数(模板函数)================================
  44          // 根据项目需要删减
  45          
  46          // ======================LED0====================
  47          void LED0_On() {
  48   1              P0 = 0xff & temp_Led_P0;  // 清除其他地方对P0的值（特别是数码管一直在刷新），并且结合LED前一次的状态
  49   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  50   1              L0 = 0;  // 要将P0放在这两句代码之间，避免错乱
  51   1              temp_Led_P0 = P0;
  52   1              P2 &= 0x1f;
  53   1      }
  54          void LED0_Off() {
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 2   

  55   1              P0 = 0xff & temp_Led_P0;
  56   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  57   1              L0 = 1;  // 要将P0放在这两句代码之间，避免错乱
  58   1              temp_Led_P0 = P0;
  59   1              P2 &= 0x1f;
  60   1      }
  61          // ======================LED1====================
  62          void LED1_On() {
  63   1              P0 = 0xff & temp_Led_P0;  // 清除其他地方对P0的值（特别是数码管一直在刷新），并且结合LED前一次的状态
  64   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  65   1              L1 = 0;  // 要将P0放在这两句代码之间，避免错乱
  66   1              temp_Led_P0 = P0;
  67   1              P2 &= 0x1f;
  68   1      }
  69          void LED1_Off() {
  70   1              P0 = 0xff & temp_Led_P0;
  71   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  72   1              L1 = 1;  // 要将P0放在这两句代码之间，避免错乱
  73   1              temp_Led_P0 = P0;
  74   1              P2 &= 0x1f;
  75   1      }
  76          // ======================LED2====================
  77          void LED2_On() {
  78   1              P0 = 0xff & temp_Led_P0;
  79   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  80   1              L2 = 0;  // 要将P0放在这两句代码之间，避免错乱
  81   1              temp_Led_P0 = P0;
  82   1              P2 &= 0x1f;
  83   1      }
  84          void LED2_Off() {
  85   1              P0 = 0xff & temp_Led_P0;
  86   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  87   1              L2 = 1;  // 要将P0放在这两句代码之间，避免错乱
  88   1              temp_Led_P0 = P0;
  89   1              P2 &= 0x1f;
  90   1      }
  91          // ======================LED3====================
  92          void LED3_On() {
  93   1              P0 = 0xff & temp_Led_P0;
  94   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  95   1              L3 = 0;  // 要将P0放在这两句代码之间，避免错乱
  96   1              temp_Led_P0 = P0;
  97   1              P2 &= 0x1f;
  98   1      }
  99          void LED3_Off() {
 100   1              P0 = 0xff & temp_Led_P0;
 101   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 102   1              L3 = 1;  // 要将P0放在这两句代码之间，避免错乱
 103   1              temp_Led_P0 = P0;
 104   1              P2 &= 0x1f;
 105   1      }
 106          // ======================LED4====================
 107          void LED4_On() {
 108   1              P0 = 0xff & temp_Led_P0;
 109   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 110   1              L4 = 0;  // 要将P0放在这两句代码之间，避免错乱
 111   1              temp_Led_P0 = P0;
 112   1              P2 &= 0x1f;
 113   1      }
 114          void LED4_Off() {
 115   1              P0 = 0xff & temp_Led_P0 & temp_Led_P0;
 116   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 3   

 117   1              L4 = 1;  // 要将P0放在这两句代码之间，避免错乱
 118   1              temp_Led_P0 = P0;
 119   1              P2 &= 0x1f;
 120   1      }
 121          // ======================LED5====================
 122          void LED5_On() {
 123   1              P0 = 0xff & temp_Led_P0;
 124   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 125   1              L5 = 0;  // 要将P0放在这两句代码之间，避免错乱
 126   1              temp_Led_P0 = P0;
 127   1              P2 &= 0x1f;
 128   1      }
 129          void LED5_Off() {
 130   1              P0 = 0xff & temp_Led_P0;
 131   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 132   1              L5 = 1;  // 要将P0放在这两句代码之间，避免错乱
 133   1              temp_Led_P0 = P0;
 134   1              P2 &= 0x1f;
 135   1      }
 136          // ======================LED6====================
 137          void LED6_On() {
 138   1              P0 = 0xff & temp_Led_P0;
 139   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 140   1              L6 = 0;  // 要将P0放在这两句代码之间，避免错乱
 141   1              temp_Led_P0 = P0;
 142   1              P2 &= 0x1f;
 143   1      }
 144          void LED6_Off() {
 145   1              P0 = 0xff & temp_Led_P0;
 146   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 147   1              L6 = 1;  // 要将P0放在这两句代码之间，避免错乱
 148   1              temp_Led_P0 = P0;
 149   1              P2 &= 0x1f;
 150   1      }
 151          
 152          void LED_On(uchar n) {
 153   1              P0 = 0xff & temp_Led_P0;
 154   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 155   1              L6 = 0;  // 要将P0放在这两句代码之间，避免错乱
 156   1              temp_Led_P0 = P0;
 157   1              P2 &= 0x1f;
 158   1      }
*** WARNING C280 IN LINE 152 OF main.c: 'n': unreferenced local variable
 159          //=========================================数码管显示==============================================
 160          void Display_SMG(uchar n1,uchar n2,uchar n3,uchar n4,uchar n5,uchar n6,uchar n7,uchar n8)
 161          {
 162   1              char i;
 163   1              P0 = 0xff;
 164   1              P2 = (P2 & 0x1f) | 0xc0;//数码管位选
 165   1              P0 = type2[i];
 166   1              P2 &= 0x1f;
 167   1              switch(i)//数码管位选
 168   1              {
 169   2                      case 0:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n1];P2 &= 0x1f;break;
 170   2                      case 1:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n2];P2 &= 0x1f;break;
 171   2                      case 2:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n3];P2 &= 0x1f;break;
 172   2                      case 3:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n4];P2 &= 0x1f;break;
 173   2                      case 4:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n5];P2 &= 0x1f;break;
 174   2                      case 5:P2 = (P2 & 0x1f) | 0xe0;
 175   2                                                                              if(0)  // 根据需要的条件
 176   2                                                                              {
 177   3                                                                                      P0 = type1[n6]&0x7f;  // 加入小数点
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 4   

 178   3                                                                              }
 179   2                                                                              else
 180   2                                                                                      P0 = type1[n6];
 181   2                                                                                                        P2 &= 0x1f;break;
 182   2                      case 6:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n7];P2 &= 0x1f;break;
 183   2                      case 7:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n8];P2 &= 0x1f;break;
 184   2              }
 185   1              if(++i==8)
 186   1                      i = 0;
 187   1      }
 188          //============================================独立按键============================================
 189          /***************************************************
 190          写法一：
 191          有按键被按下，GN标记，后面根据需要功能进行操作
 192          ***************************************************/
 193          void Delay_Keys(uint t)
 194          {
 195   1              while(t--);
 196   1      }
 197          uchar Scan_Keys_Alone()
 198          {
 199   1              char d;
 200   1              d = (~P3) & 0x0f;
 201   1              if(d == 0) return 0;
 202   1              Delay_Keys(100);
 203   1              if(d == 0) return 0;
 204   1              Delay_Keys(100);
 205   1              return d;
 206   1      }
 207          void Change_Keys_Alone()
 208          {
 209   1              switch(Scan_Keys_Alone())
 210   1              {
 211   2                      case 8:GN = 1;break;//S4
 212   2                      case 4:GN = 2;break;//S5
 213   2                      case 2:GN = 3;break;//S6
 214   2                      case 1:GN = 4;break;//S7
 215   2                      case 0:GN = 0;break;
 216   2              }
 217   1      }
 218          
 219          /***************************************************
 220          写法二：
 221          有按键被按下，按下是一种状态，松开是另一种状态
 222          （如：按下时某个灯亮，松开时灯灭）
 223          ***************************************************/
 224          void ScanKeys_Alone() 
 225          {
 226   1              if (S7 == 0) {
 227   2                      Delay_Keys(100);
 228   2                      if (S7 == 0) {
 229   3                              // =========================================== 代码开始 ======================================
 230   3                              
 231   3                              // =========================================== 代码结束 ======================================
 232   3                              while(S7 == 0);
 233   3                              // =========================================== 代码开始 ======================================
 234   3      
 235   3                              // =========================================== 代码结束 ======================================
 236   3                      }
 237   2              }
 238   1              
 239   1              if (S6 == 0) {
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 5   

 240   2                      Delay_Keys(100);
 241   2                      if (S6 == 0) {
 242   3                              // =========================================== 代码开始 ======================================
 243   3                              
 244   3                              // =========================================== 代码结束 ======================================
 245   3                              while(S6 == 0);
 246   3                              // =========================================== 代码开始 ======================================
 247   3      
 248   3                              // =========================================== 代码结束 ======================================
 249   3                      }
 250   2              }
 251   1              
 252   1              if (S5 == 0) {
 253   2                      Delay_Keys(100);
 254   2                      if (S5 == 0) {
 255   3                              // =========================================== 代码开始 ======================================
 256   3      
 257   3                              // =========================================== 代码结束 ======================================
 258   3                              while(S5 == 0);
 259   3                              // =========================================== 代码开始 ======================================
 260   3      
 261   3                              // =========================================== 代码结束 ======================================
 262   3                      }
 263   2              }
 264   1      
 265   1              if (S4 == 0) {
 266   2                      Delay_Keys(100);
 267   2                      if (S4 == 0) {
 268   3                              // =========================================== 代码开始 ======================================
 269   3      
 270   3                              // =========================================== 代码结束 ======================================
 271   3                              while(S4 == 0);
 272   3                              // =========================================== 代码开始 ======================================
 273   3      
 274   3                              // =========================================== 代码结束 ======================================
 275   3                      }
 276   2              }
 277   1      }
 278          
 279          // ================= 代码结束 =============
 280          
 281          //============================================矩阵按键============================================
 282          sfr P4 = 0xc0;
 283          sbit P44 = P4^4;
 284          sbit P42 = P4^2;
 285          
 286          uchar Scan_Keys()
 287          {
 288   1              char H,L;
 289   1              P3 =  0xcf;P44 = 0;P42 = 0;H = (~P3) & 0x0f;
 290   1              if(H == 0) return 0;
 291   1              Delay_Keys(100);
 292   1              P3 =  0xcf;P44 = 0;P42 = 0;H = (~P3) & 0x0f;
 293   1              if(H == 0) return 0;
 294   1              P3 =  0xf0;P44 = 1;P42 = 1;L = (~P3) & 0x30;
 295   1              if(P44 == 0) L |= 0x80;
 296   1              if(P42 == 0) L |= 0x40;
 297   1              return (H+L);
 298   1      }
 299          
 300          void Change_Keys()
 301          {
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 6   

 302   1              switch(Scan_Keys())
 303   1              {
 304   2                      case 0x88:GN = 4;break;  // S4
 305   2                      case 0x84:GN = 5;break;  // S5
 306   2                      case 0x82:GN = 6;break;  // S6
 307   2                      case 0x81:GN = 7;break;  // S7
 308   2                      case 0x48:GN = 8;break;  // S8
 309   2                      case 0x44:GN = 9;break;  // S9
 310   2                      case 0x42:GN = 10;break;  // S10
 311   2                      case 0x41:GN = 11;break;  // S11
 312   2                      case 0x28:GN = 12;break;  // S12
 313   2                      case 0x24:GN = 13;break;  // S13
 314   2                      case 0x22:GN = 14;break;  // S14
 315   2                      case 0x21:GN = 15;break;  // S15
 316   2                      case 0x18:GN = 16;break;  // S16
 317   2                      case 0x14:GN = 17;break;  // S17
 318   2                      case 0x12:GN = 18;break;  // S18
 319   2                      case 0x11:GN = 19;break;  // S19
 320   2                      case 0:GN = 0;break;
 321   2              }
 322   1      }
 323          //============================================24C02初始化============================================
 324          void Write_24C02_Byte(unsigned char addr,unsigned char dat)
 325          {
 326   1              I2CStart();
 327   1              I2CSendByte(0xa0);
 328   1              I2CWaitAck();
 329   1              I2CSendByte(addr);
 330   1              I2CWaitAck();
 331   1              I2CSendByte(dat);
 332   1              I2CWaitAck();
 333   1              I2CStop(); 
 334   1      }
 335          
 336          unsigned char Read_24C02_Byte(unsigned char addr)
 337          {
 338   1              unsigned char tmp;
 339   1              I2CStart();
 340   1              I2CSendByte(0xa0);
 341   1              I2CWaitAck();
 342   1              I2CSendByte(addr);
 343   1              I2CWaitAck();
 344   1              
 345   1              I2CStart();
 346   1              I2CSendByte(0xa1);
 347   1              I2CWaitAck();
 348   1              tmp = I2CRecByte(); 
*** WARNING C206 IN LINE 348 OF main.c: 'I2CRecByte': missing function-prototype
 349   1              I2CSendAck(1);
 350   1              I2CStop();
 351   1              
 352   1              return tmp;
 353   1      }
 354          //============================================定时器T0初始化=======================================
 355          uchar count = 0;
 356          uchar pwm_dut = 0;//占空比
 357          void Init_T0()
 358          {
 359   1              TMOD = (TMOD & 0xf0) | 0x01;  // 定时
 360   1              TH0 = (65536 - 100) / 256;  // 50ms
 361   1              TL0 = (65536 - 100) % 256; 
 362   1              
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 7   

 363   1              EA = 1;
 364   1              ET0 = 1;
 365   1      //      TR0 = 1;
 366   1      }
 367          //============================================定时器T1初始化=======================================
 368          void Init_T1()
 369          {
 370   1              TMOD = (TMOD & 0x0f) | 0x10;//定时
 371   1              TH1 = (65536 - 2000) / 256;//2ms
 372   1              TL1 = (65536 - 2000) % 256;
 373   1              
 374   1              EA = 1;
 375   1              ET1 = 1;
 376   1              TR1 = 1;
 377   1      }
 378          //==========================================系统初始化=============================================
 379          void Init_Sys()
 380          {
 381   1              P2 = (P2 & 0x1f) | 0x80;  // LED
 382   1              P0 = 0xff;
 383   1              P2 &= 0x1f;
 384   1              P2 = (P2 & 0x1f) | 0xa0;  // 蜂鸣器，寄存器
 385   1              P0 = 0x00;
 386   1              P2 &= 0x1f;
 387   1              P2 = (P2 & 0x1f) | 0xc0;  // 数码管
 388   1              P0 = 0xff;
 389   1              P2 &= 0x1f;
 390   1              P2 = (P2 & 0x1f) | 0xe0;
 391   1              P0 = 0xff;
 392   1              
 393   1              num1=num2=num3=num4=num5=num6=num7=num8=10;
 394   1      }
 395          
 396          void LED_control() {
 397   1              // ================= 测试开始 =============
 398   1      //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 399   1      //      P0 = 0x7f;  // 要将P0放在这两句代码之间，避免错乱
 400   1      //      P2 &= 0x1f;
 401   1              // ================= 测试结束 =============
 402   1              
 403   1              // =========================================== 代码开始 ======================================
 404   1              
 405   1              // =========================================== 代码结束 ======================================
 406   1      }
 407          
 408          void main()
 409          {
 410   1              Init_Sys();
 411   1              Init_T1();
 412   1              
 413   1      //      dat1 = Read_24C02_Byte(0x01);
 414   1      //      dat2 = Read_24C02_Byte(0x03);
 415   1      //      dat3 = Read_24C02_Byte(0x05);
 416   1              while(1)
 417   1              {
 418   2      //              LED_control();
 419   2              if(f_2ms == 1)
 420   2              {
 421   3                  f_2ms = 0;                  
 422   3                              LED_control();  // xxx
 423   3                              // =======================按键开始========================
 424   3                              /*根据需要选择对应的按键类型*/
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 8   

 425   3      //                      Change_Keys_Alone();  // 1.独立按键扫描(1)
 426   3      //                      ScanKeys_Alone();     // 2.独立按键扫描(2)
 427   3                              Change_Keys();        // 3.矩阵按键扫描
 428   3                              if (GN == 16) {  // S16
 429   4                                      // =========================================== 代码开始 ======================================
 430   4                                      LED1_On();
 431   4                                      // =========================================== 代码结束 ======================================
 432   4                                      while(Scan_Keys());
 433   4                                      // =========================================== 代码开始 ======================================
 434   4                                      LED1_Off();
 435   4                                      // =========================================== 代码结束 ======================================
 436   4                              }
 437   3                              // 根据需要添加对应按键
 438   3                              // =======================按键结束========================
 439   3                              
 440   3                              // =========================================== 代码开始 ======================================
 441   3                              
 442   3                              // =========================================== 代码结束 ======================================
 443   3              }
 444   2          }
 445   1      }
 446          
 447          void Service_T0() interrupt 2
 448          {
 449   1              TH0 = (65536 - 50000) / 256;
 450   1              TL0 = (65536 - 50000) % 256;
 451   1              
 452   1              f_50ms = 1;
 453   1              
 454   1      }
 455          
 456          void Service_T1() interrupt 3
 457          {
 458   1              TH1 = (65536 - 2000) / 256;
 459   1              TL1 = (65536 - 2000) % 256;
 460   1              
 461   1              f_2ms = 1;
 462   1              
 463   1              /***************************************************
 464   1              与时间相关的变量的更新放在里面
 465   1              注意：不要把消耗过长时间的代码（如for循环等）放在这里，容易造成错乱
 466   1              ***************************************************/
 467   1              // =========================================== 代码开始 ======================================
 468   1              num_2ms ++ ;
 469   1              if (num_2ms == 500) {
 470   2                      f_1s = 1;
 471   2                      num_2ms = 0;
 472   2              }
 473   1              if (f_1s == 1) {
 474   2                      f_1s = 0;
 475   2                      num_s ++ ;
 476   2                      if (num_s == 9) 
 477   2                      num_s = 0;
 478   2              }
 479   1              num1 = 2;num2 = 0; num3 = 2; num4 = 4;
 480   1              num5=num6=11;
 481   1              num7=num_s / 10, num8=num_s % 10;
 482   1              // =========================================== 代码结束 ======================================
 483   1              
 484   1              Display_SMG(num1,num2,num3,num4,num5,num6,num7,num8);//2ms刷新数码管
 485   1      }
*** WARNING C294 IN LINE 177 OF main.c: unreachable code
C51 COMPILER V9.60.7.0   MAIN                                                              04/07/2024 01:39:01 PAGE 9   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1271    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
