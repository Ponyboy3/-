C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "reg52.h"
   2          #include "onewire.h"
   3          #include "iic.h"
   4          #include "ds1302.h"
   5          #include "intrins.h"
   6          
   7          #define uchar unsigned char 
   8          #define uint unsigned int
   9          
  10          // 数码管显示数据， 一般前10个为0-9， 可更具需要往里面添加
  11          unsigned char code type1[] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xff,0xbf,0x8e,0xc8,0xc1};
  12          // 数码管位
  13          uchar code type2[] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  14          
  15          unsigned char num1,num2,num3,num4,num5,num6,num7,num8;  // 数码管每一位（例如 num1 = 2, 第一个数码管显示 2
             -）
  16          unsigned char GN;  // 按键标志位
  17          bit f_2ms, f_50ms, f_200ms_temperature;  // 2ms, 50ms, 500ms标志位
  18          unsigned char temp_Led_P0 = 0xff;  // 用来存上一次LED状态
  19          unsigned int temperature;  // 温度
  20          unsigned int num_2ms_temperature;  // 多少个2ms
  21          unsigned char ds1302_h, ds1302_m, ds1302_s;  // 
  22          unsigned char dat1 = 0x16,dat2 = 0x55,dat3 = 0x50;  // （16进制）ds1302写数据
  23          unsigned char dat[8];
  24          int set_ds1302_h = 23,set_ds1302_m = 59,set_ds1302_s = 45;  // 默认（24c02写数据）时间设置
  25          uchar set_ds1302_key_modele;  // 时间设置的按键模式
  26          bit f_set_time, f_key_long, is_key_set_time;
  27          uchar t_key;  // 按键按住时间
  28          
  29          unsigned char dis_model = 0;  // 0:显示温度（DS18B20）， 1:显示时钟
  30          
  31          uint distance;
  32          
  33          sbit S7 = P3^0;
  34          sbit S6 = P3^1;
  35          sbit S5 = P3^2;
  36          sbit S4 = P3^3;
  37          
  38          sbit L0 = P0^0;
  39          sbit L1 = P0^1;
  40          sbit L2 = P0^2;
  41          sbit L3 = P0^3;
  42          sbit L4 = P0^4;
  43          sbit L5 = P0^5;
  44          sbit L6 = P0^6;
  45          
  46          // =========================================== 代码开始 ======================================
  47          bit f_1s;  // 1s标志位
  48          
  49          unsigned int num_2ms = 0, num_s = 0, num_s_key = 0;  // 多少个2ms, 1s, 按键按下时间
  50          
  51          bit f_time = 1;  // 定时器0秒钟是否暂停
  52          unsigned char urdat;  // 串口接收数据
  53          
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 2   

  54          unsigned int num_On_Off;  // 开关次数
  55          
  56          // =========================================== 代码结束 ======================================
  57          
  58          
  59          //=========================================普通延时函数(模板函数)=================================
  60          void Delay(uint t) {
  61   1              while( t -- );
  62   1              while( t -- );
  63   1      }
  64          //=======================================单个LED控制函数(模板函数)================================
  65          // 根据项目需要删减
  66          
  67          // ======================LED0====================
  68          void LED0_On() {
  69   1              P0 = 0xff & temp_Led_P0;  // 清除其他地方对P0的值（特别是数码管一直在刷新），并且结合LED前一次的状态
  70   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  71   1              L0 = 0;  // 要将P0放在这两句代码之间，避免错乱
  72   1              temp_Led_P0 = P0;
  73   1              P2 &= 0x1f;
  74   1      }
  75          void LED0_Off() {
  76   1              P0 = 0xff & temp_Led_P0;
  77   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  78   1              L0 = 1;  // 要将P0放在这两句代码之间，避免错乱
  79   1              temp_Led_P0 = P0;
  80   1              P2 &= 0x1f;
  81   1      }
  82          // ======================LED1====================
  83          void LED1_On() {
  84   1              P0 = 0xff & temp_Led_P0;  // 清除其他地方对P0的值（特别是数码管一直在刷新），并且结合LED前一次的状态
  85   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  86   1              L1 = 0;  // 要将P0放在这两句代码之间，避免错乱
  87   1              temp_Led_P0 = P0;
  88   1              P2 &= 0x1f;
  89   1      }
  90          void LED1_Off() {
  91   1              P0 = 0xff & temp_Led_P0;
  92   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  93   1              L1 = 1;  // 要将P0放在这两句代码之间，避免错乱
  94   1              temp_Led_P0 = P0;
  95   1              P2 &= 0x1f;
  96   1      }
  97          // ======================LED2====================
  98          void LED2_On() {
  99   1              P0 = 0xff & temp_Led_P0;
 100   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 101   1              L2 = 0;  // 要将P0放在这两句代码之间，避免错乱
 102   1              temp_Led_P0 = P0;
 103   1              P2 &= 0x1f;
 104   1      }
 105          void LED2_Off() {
 106   1              P0 = 0xff & temp_Led_P0;
 107   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 108   1              L2 = 1;  // 要将P0放在这两句代码之间，避免错乱
 109   1              temp_Led_P0 = P0;
 110   1              P2 &= 0x1f;
 111   1      }
 112          // ======================LED3====================
 113          void LED3_On() {
 114   1              P0 = 0xff & temp_Led_P0;
 115   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 3   

 116   1              L3 = 0;  // 要将P0放在这两句代码之间，避免错乱
 117   1              temp_Led_P0 = P0;
 118   1              P2 &= 0x1f;
 119   1      }
 120          void LED3_Off() {
 121   1              P0 = 0xff & temp_Led_P0;
 122   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 123   1              L3 = 1;  // 要将P0放在这两句代码之间，避免错乱
 124   1              temp_Led_P0 = P0;
 125   1              P2 &= 0x1f;
 126   1      }
 127          // ======================LED4====================
 128          void LED4_On() {
 129   1              P0 = 0xff & temp_Led_P0;
 130   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 131   1              L4 = 0;  // 要将P0放在这两句代码之间，避免错乱
 132   1              temp_Led_P0 = P0;
 133   1              P2 &= 0x1f;
 134   1      }
 135          void LED4_Off() {
 136   1              P0 = 0xff & temp_Led_P0 & temp_Led_P0;
 137   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 138   1              L4 = 1;  // 要将P0放在这两句代码之间，避免错乱
 139   1              temp_Led_P0 = P0;
 140   1              P2 &= 0x1f;
 141   1      }
 142          // ======================LED5====================
 143          void LED5_On() {
 144   1              P0 = 0xff & temp_Led_P0;
 145   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 146   1              L5 = 0;  // 要将P0放在这两句代码之间，避免错乱
 147   1              temp_Led_P0 = P0;
 148   1              P2 &= 0x1f;
 149   1      }
 150          void LED5_Off() {
 151   1              P0 = 0xff & temp_Led_P0;
 152   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 153   1              L5 = 1;  // 要将P0放在这两句代码之间，避免错乱
 154   1              temp_Led_P0 = P0;
 155   1              P2 &= 0x1f;
 156   1      }
 157          // ======================LED6====================
 158          void LED6_On() {
 159   1              P0 = 0xff & temp_Led_P0;
 160   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 161   1              L6 = 0;  // 要将P0放在这两句代码之间，避免错乱
 162   1              temp_Led_P0 = P0;
 163   1              P2 &= 0x1f;
 164   1      }
 165          void LED6_Off() {
 166   1              P0 = 0xff & temp_Led_P0;
 167   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 168   1              L6 = 1;  // 要将P0放在这两句代码之间，避免错乱
 169   1              temp_Led_P0 = P0;
 170   1              P2 &= 0x1f;
 171   1      }
 172          //=========================================数码管显示==============================================
 173          void Display_SMG(uchar n1,uchar n2,uchar n3,uchar n4,uchar n5,uchar n6,uchar n7,uchar n8)
 174          {
 175   1              char i;
 176   1              P0 = 0xff;
 177   1              P2 = (P2 & 0x1f) | 0xc0;//数码管位选
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 4   

 178   1              P0 = type2[i];
 179   1              P2 &= 0x1f;
 180   1              switch(i)//数码管位选
 181   1              {
 182   2                      case 0:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n1];P2 &= 0x1f;break;
 183   2                      case 1:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n2];P2 &= 0x1f;break;
 184   2                      case 2:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n3];P2 &= 0x1f;break;
 185   2                      case 3:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n4];P2 &= 0x1f;break;
 186   2                      case 4:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n5];P2 &= 0x1f;break;
 187   2                      case 5:P2 = (P2 & 0x1f) | 0xe0;
 188   2                                                                              if(dis_model == 1)  // 根据需要的条件
 189   2                                                                              {
 190   3                                                                                      P0 = type1[n6]&0x7f;  // 加入小数点
 191   3                                                                              }
 192   2                                                                              else
 193   2                                                                                      P0 = type1[n6];
 194   2                                                                                                        P2 &= 0x1f;break;
 195   2                      case 6:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n7];P2 &= 0x1f;break;
 196   2                      case 7:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n8];P2 &= 0x1f;break;
 197   2              }
 198   1              if(++i==8)
 199   1                      i = 0;
 200   1      }
 201          //============================================独立按键============================================
 202          /***************************************************
 203          写法一：
 204          有按键被按下，GN标记，后面根据需要功能进行操作
 205          ***************************************************/
 206          void Delay_Keys(uint t)
 207          {
 208   1              while(t--);
 209   1      }
 210          uchar Scan_Keys_Alone()
 211          {
 212   1              char d;
 213   1              d = (~P3) & 0x0f;
 214   1              if(d == 0) return 0;
 215   1              Delay_Keys(100);
 216   1              if(d == 0) return 0;
 217   1              Delay_Keys(100);
 218   1              return d;
 219   1      }
 220          void Change_Keys_Alone()
 221          {
 222   1              switch(Scan_Keys_Alone())
 223   1              {
 224   2                      case 8:GN = 1;break;//S4
 225   2                      case 4:GN = 2;break;//S5
 226   2                      case 2:GN = 3;break;//S6
 227   2                      case 1:GN = 4;break;//S7
 228   2                      case 0:GN = 0;break;
 229   2              }
 230   1      }
 231          
 232          /***************************************************
 233          写法二：
 234          有按键被按下，按下是一种状态，松开是另一种状态
 235          （如：按下时某个灯亮，松开时灯灭）
 236          ***************************************************/
 237          //void ScanKeys_Alone() 
 238          //{
 239          //      if (S7 == 0) {
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 5   

 240          //              Delay_Keys(100);
 241          //              if (S7 == 0) {
 242          //                      // =========================================== 代码开始 ======================================
 243          //                      
 244          //                      // =========================================== 代码结束 ======================================
 245          //                      while(S7 == 0);
 246          //                      // =========================================== 代码开始 ======================================
 247          
 248          //                      // =========================================== 代码结束 ======================================
 249          //              }
 250          //      }
 251          //      
 252          //      if (S6 == 0) {
 253          //              Delay_Keys(100);
 254          //              if (S6 == 0) {
 255          //                      // =========================================== 代码开始 ======================================
 256          //                      
 257          //                      // =========================================== 代码结束 ======================================
 258          //                      while(S6 == 0);
 259          //                      // =========================================== 代码开始 ======================================
 260          
 261          //                      // =========================================== 代码结束 ======================================
 262          //              }
 263          //      }
 264          //      
 265          //      if (S5 == 0) {
 266          //              Delay_Keys(100);
 267          //              if (S5 == 0) {
 268          //                      // =========================================== 代码开始 ======================================
 269          
 270          //                      // =========================================== 代码结束 ======================================
 271          //                      while(S5 == 0);
 272          //                      // =========================================== 代码开始 ======================================
 273          
 274          //                      // =========================================== 代码结束 ======================================
 275          //              }
 276          //      }
 277          
 278          //      if (S4 == 0) {
 279          //              Delay_Keys(100);
 280          //              if (S4 == 0) {
 281          //                      // =========================================== 代码开始 ======================================
 282          
 283          //                      // =========================================== 代码结束 ======================================
 284          //                      while(S4 == 0);
 285          //                      // =========================================== 代码开始 ======================================
 286          
 287          //                      // =========================================== 代码结束 ======================================
 288          //              }
 289          //      }
 290          //}
 291          
 292          // ================= 代码结束 =============
 293          
 294          //============================================矩阵按键============================================
 295          sfr P4 = 0xc0;
 296          sbit P44 = P4^4;
 297          sbit P42 = P4^2;
 298          
 299          uchar Scan_Keys()
 300          {
 301   1              char H,L;
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 6   

 302   1              P3 =  0xcf;P44 = 0;P42 = 0;H = (~P3) & 0x0f;
 303   1              if(H == 0) return 0;
 304   1              Delay_Keys(100);
 305   1              P3 =  0xcf;P44 = 0;P42 = 0;H = (~P3) & 0x0f;
 306   1              if(H == 0) return 0;
 307   1              P3 =  0xf0;P44 = 1;P42 = 1;L = (~P3) & 0x30;
 308   1              if(P44 == 0) L |= 0x80;
 309   1              if(P42 == 0) L |= 0x40;
 310   1              return (H+L);
 311   1      }
 312          
 313          void Change_Keys()
 314          {
 315   1              switch(Scan_Keys())
 316   1              {
 317   2                      case 0x88:GN = 4;break;  // S4
 318   2                      case 0x84:GN = 5;break;  // S5
 319   2                      case 0x82:GN = 6;break;  // S6
 320   2                      case 0x81:GN = 7;break;  // S7
 321   2                      case 0x48:GN = 8;break;  // S8
 322   2                      case 0x44:GN = 9;break;  // S9
 323   2                      case 0x42:GN = 10;break;  // S10
 324   2                      case 0x41:GN = 11;break;  // S11
 325   2                      case 0x28:GN = 12;break;  // S12
 326   2                      case 0x24:GN = 13;break;  // S13
 327   2                      case 0x22:GN = 14;break;  // S14
 328   2                      case 0x21:GN = 15;break;  // S15
 329   2                      case 0x18:GN = 16;break;  // S16
 330   2                      case 0x14:GN = 17;break;  // S17
 331   2                      case 0x12:GN = 18;break;  // S18
 332   2                      case 0x11:GN = 19;break;  // S19
 333   2                      case 0:GN = 0;break;
 334   2              }
 335   1      }
 336          //============================================24C02初始化============================================
 337          void Write_24C02_Byte(unsigned char addr,unsigned char dat)
 338          {
 339   1              IIC_Start();
 340   1              IIC_SendByte(0xa0);
 341   1              IIC_WaitAck();
 342   1              IIC_SendByte(addr);
 343   1              IIC_WaitAck();
 344   1              IIC_SendByte(dat);
 345   1              IIC_WaitAck();
 346   1              IIC_Stop(); 
 347   1      }
 348          
 349          unsigned char Read_24C02_Byte(unsigned char addr)
 350          {
 351   1              unsigned char tmp;
 352   1              IIC_Start();
 353   1              IIC_SendByte(0xa0);
 354   1              IIC_WaitAck();
 355   1              IIC_SendByte(addr);
 356   1              IIC_WaitAck();
 357   1              
 358   1              IIC_Start();
 359   1              IIC_SendByte(0xa1);
 360   1              IIC_WaitAck();
 361   1              tmp = IIC_RecByte(); 
 362   1              IIC_SendAck(1);
 363   1              IIC_Stop();
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 7   

 364   1              
 365   1              return tmp;
 366   1      }
 367          
 368          void Write_24C02_Page(unsigned char addr, unsigned char *dat, unsigned char len)
 369          {
 370   1              unsigned char i;
 371   1              IIC_Start();
 372   1              IIC_SendByte(0xa0);
 373   1              IIC_WaitAck();
 374   1              IIC_SendByte(addr);
 375   1              IIC_WaitAck();
 376   1              
 377   1              for (i = 0; i < len; i ++ ) {
 378   2                      IIC_SendByte(dat[i]);
 379   2                      IIC_WaitAck();
 380   2              }
 381   1              IIC_Stop(); 
 382   1      }
 383          
 384          void Read_24C02_Page(unsigned char addr, unsigned char *dat, unsigned char len)
 385          {
 386   1              unsigned char i;
 387   1              IIC_Start();
 388   1              IIC_SendByte(0xa0);
 389   1              IIC_WaitAck();
 390   1              IIC_SendByte(addr);
 391   1              IIC_WaitAck();
 392   1              
 393   1              IIC_Start();
 394   1              IIC_SendByte(0xa1);
 395   1              IIC_WaitAck();
 396   1              for (i = 0; i < len - 1; i ++ ) {
 397   2                      dat[i] = IIC_RecByte();
 398   2                      IIC_SendAck(0);
 399   2              }
 400   1              dat[len - 1] = IIC_RecByte();
 401   1              IIC_SendAck(1);
 402   1              IIC_Stop();
 403   1      }
 404          //============================================DS18B20初始化============================================
 405          void Init_18b20()
 406          {
 407   1              init_ds18b20();
 408   1              Write_DS18B20(0xcc);
 409   1              Write_DS18B20(0x4e);
 410   1              Write_DS18B20(0x00);
 411   1              Write_DS18B20(0x00);
 412   1              Write_DS18B20(0x7f);
 413   1      }
 414          unsigned int Read_Temperature(void)  // 当需要保留2为小数时，才需要用到unsigned int,
 415                                                                                   // 这里介绍3种类型，所以用unsigned int，保留整数
 416                                                                           // 和一位小数可用unsigned char.
 417          {
 418   1              unsigned char H,L;
 419   1              init_ds18b20();
 420   1              Write_DS18B20(0xcc);
 421   1              Write_DS18B20(0xbe);
 422   1              L = Read_DS18B20();
 423   1              H = Read_DS18B20();
 424   1              
 425   1              init_ds18b20();
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 8   

 426   1              Write_DS18B20(0xcc);
 427   1              Write_DS18B20(0x44);
 428   1              
 429   1              //1.保留整数--23
 430   1              //temp = (H<<4) + (L>>4);
 431   1              
 432   1              //2.保留1位小数--23.4
 433   1              //temp = ((H<<8) + L)*5/8;
 434   1              
 435   1              //3.保留2位小数--23.45
 436   1              return ((H<<8)+L)*25/4;  // (50/8)
 437   1      }
 438          //============================================Ds1302初始化============================================
 439          void My_Write_Ds1302()
 440          {
 441   1              Write_Ds1302_Byte(0x8e,0x00);
 442   1              Write_Ds1302_Byte(0x84,dat1);//时
 443   1              Write_Ds1302_Byte(0x82,dat2);//分
 444   1              Write_Ds1302_Byte(0x80,dat3);//秒
 445   1      }
 446          void My_Read_Ds1302()
 447          {
 448   1              ds1302_h = Read_Ds1302_Byte(0x85);//时
 449   1              ds1302_h = (ds1302_h >> 4) * 10 + (ds1302_h & 0x0f);
 450   1              ds1302_m = Read_Ds1302_Byte(0x83);//分
 451   1              ds1302_m = (ds1302_m >> 4) * 10 + (ds1302_m & 0x0f);
 452   1              ds1302_s = Read_Ds1302_Byte(0x81);//秒
 453   1              ds1302_s = (ds1302_s >> 4) * 10 + (ds1302_s & 0x0f);
 454   1      }
 455          //============================================定时器T0初始化=======================================
 456          uchar count = 0;
 457          uchar pwm_dut = 0;//占空比
 458          void Init_T0()
 459          {
 460   1              TMOD = (TMOD & 0xf0) | 0x01;
 461   1              TH0 = (65536 - 12) / 256;
 462   1              TL0 = (65536 - 12) % 256;
 463   1      }
 464          //============================================定时器T1初始化=======================================
 465          void Init_T1()
 466          {
 467   1              TMOD = (TMOD & 0x0f) | 0x10;//定时
 468   1              TH1 = (65536 - 2000) / 256;
 469   1              TL1 = (65536 - 2000) % 256;
 470   1              
 471   1              EA = 1;
 472   1              ET1 = 1;
 473   1              TR1 = 1;
 474   1      }
 475          //============================================超声波测距=======================================
 476          sbit TX = P1 ^ 0;
 477          sbit RX = P1 ^ 1;
 478          
 479          uchar Get_Distance()
 480          {
 481   1              uchar temp = 16;
 482   1              TX = 0;
 483   1              TR0 = 1;
 484   1              // 引脚发送40Khz方波信号
 485   1              while (temp--) // 每隔12us发8个方波
 486   1              {
 487   2                      while (!TF0)
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 9   

 488   2                              ;
 489   2                      TX ^= 1; // if(TX==1) { Delay20us();}//可以不用
 490   2                      TH0 = (65536 - 12) / 256;
 491   2                      TL0 = (65536 - 12) % 256;
 492   2                      TF0 = 0;
 493   2              }
 494   1              //      while(temp--)
 495   1              //      {
 496   1              //              while(!TF0);
 497   1              //              TX ^= 1;//TX = ~TX;
 498   1              //              TH0=(65536-12)/256;
 499   1              //              TL0=(65536-12)%256;
 500   1              //              TF0 = 0;//TF0必须要先赋值(益处中断，自动置1)在清零
 501   1              //      }
 502   1              TR0 = 0;
 503   1              TL0 = 0;
 504   1              TH0 = 0;
 505   1              TR0 = 1;
 506   1              while (RX && !TF0)
 507   1                      ;
 508   1              TR0 = 0;
 509   1      
 510   1              if (TF0 == 1)
 511   1              {
 512   2                      TF0 = 0;
 513   2                      return 999;
 514   2              }
 515   1              else
 516   1                      return ((TH0 << 8) + TL0) * 0.017;
 517   1      }
 518          //===========================================串口初始化============================================
 519          #include "intrins.h"
 520          #include "string.h"
 521          
 522          sfr AUXR = 0x8e;  // 辅助寄存器
 523          sfr T2H=0xd6;  // 定时器2高8位
 524          sfr T2L=0xd7;  // 定时器2低8位
 525          
 526          #define BAUD         9600
 527          //#define SYSTEMCLOCK  11059200L
 528          #define SYSTEMCLOCK  12000000L
 529          uchar command = 0x00;
 530          void Init_Uart()
 531          {
 532   1      //      TMOD = (TMOD & 0x0f) | 0x00;  // T1
 533   1              
 534   1              SCON = 0x50;  // 8位数据,可变波特率
 535   1          AUXR |= 0x01; // 串口1选择定时器2为波特率发生器
 536   1          AUXR |= 0x04; // 定时器时钟1T模式
 537   1              
 538   1              T2L = (65535-(SYSTEMCLOCK / 4 / BAUD));
 539   1              T2H = (65535-(SYSTEMCLOCK / 4 / BAUD)) >> 8l;
 540   1              
 541   1      //      ET1 = 0;                    //禁止定时器1中断
 542   1      //      TR1 = 1;                    //启动定时器1
 543   1      //      SCON = 0x50;
 544   1      //      AUXR = 0x40;
 545   1              
 546   1              AUXR |= 0x10; // 定时器2开始计时
 547   1              
 548   1              ES = 1;
 549   1              EA = 1;
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 10  

 550   1              
 551   1      //      SCON = 0x50;            //8位数据,可变波特率
 552   1      //      AUXR &= 0xBF;           //定时器1时钟为Fosc/12,即12T
 553   1      //      AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 554   1      //      TMOD &= 0x0F;           //设定定时器1为16位自动重装方式
 555   1      //      TL1 = 0xE8;             //设定定时初值
 556   1      //      TH1 = 0xFF;             //设定定时初值
 557   1      //      ET1 = 0;                //禁止定时器1中断
 558   1      
 559   1      //      ES = 1;
 560   1      //      EA = 1;  
 561   1      //      TR1 = 1;                //启动定时器1
 562   1      }
 563          // 发送一个字节数据
 564          void Send_Byte(unsigned char dat)
 565          {
 566   1              SBUF = dat;
 567   1              while(TI == 0);
 568   1              TI = 0;
 569   1      }
 570          //发送一串字符串
 571          void Send_String(unsigned char* str)
 572          {
 573   1        
 574   1        while(*str != '\0')
 575   1        {
 576   2          Send_Byte(*(str++));
 577   2        }
 578   1      }
 579          //==========================================系统初始化=============================================
 580          void Init_Sys()
 581          {
 582   1              P2 = (P2 & 0x1f) | 0x80;  // LED
 583   1              P0 = 0xff;
 584   1              P2 &= 0x1f;
 585   1              P2 = (P2 & 0x1f) | 0xa0;  // 蜂鸣器，寄存器
 586   1              P0 = 0x00;
 587   1              P2 &= 0x1f;
 588   1              P2 = (P2 & 0x1f) | 0xc0;  // 数码管
 589   1              P0 = 0xff;
 590   1              P2 &= 0x1f;
 591   1              P2 = (P2 & 0x1f) | 0xe0;
 592   1              P0 = 0xff;
 593   1              
 594   1              num1=num2=num3=num4=num5=num6=num7=num8=10;
 595   1      }
 596          
 597          void LED_control() {
 598   1              // ================= 测试开始 =============
 599   1      //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 600   1      //      P0 = 0x7f;  // 要将P0放在这两句代码之间，避免错乱
 601   1      //      P2 &= 0x1f;
 602   1              // ================= 测试结束 =============
 603   1              
 604   1              // =========================================== 代码开始 ======================================
 605   1              
 606   1              // =========================================== 代码结束 ======================================
 607   1      }
 608          
 609          void main()
 610          {
 611   1              Init_Sys();
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 11  

 612   1              
 613   1              num_On_Off = Read_24C02_Byte(0x00);
 614   1              
 615   1              Init_T1();
 616   1      //      TMOD = (TMOD & 0x0f) | 0x00;//定时
 617   1              Init_T0();
 618   1              Init_18b20();
 619   1      //      My_Write_Ds1302();
 620   1      
 621   1      //      num_On_Off = Read_24C02_Byte(0x00);
 622   1      //      num_On_Off ++ ;
 623   1      //      Write_24C02_Byte(0x00, num_On_Off);
 624   1      
 625   1              Read_24C02_Page(0x01, dat, 3);
 626   1              
 627   1              
 628   1      //      dat2 = (dat[2] / 10) << 4 | (dat[2] % 10);
 629   1              dat1 = dat[0] /10*16 + dat[0] % 10;
 630   1              dat2 = dat[1] /10*16 + dat[1] % 10;
 631   1              dat3 = dat[2] /10*16 + dat[2] % 10;
 632   1              
 633   1              My_Write_Ds1302();
 634   1              
 635   1              Init_Uart();
 636   1      //      Send_Byte(dat[2] /10*16 + dat[2] % 10);
 637   1      //      Send_Byte(0xA0);
 638   1              Send_String("I am OK\r\n");
 639   1              
 640   1              while(1)
 641   1              {
 642   2      //              LED_control();
 643   2              if(f_2ms == 1)
 644   2              {
 645   3                  f_2ms = 0;                  
 646   3                              LED_control();  // xxx
 647   3      //                      Write_24C02_Byte(0x02,ds1302_s);        
 648   3      
 649   3                              distance = Get_Distance();  // 超声波测距               
 650   3                              // =======================按键开始========================
 651   3                              /*根据需要选择对应的按键类型*/
 652   3      //                      Change_Keys_Alone();  // 1.独立按键扫描(1)
 653   3      //                      ScanKeys_Alone();     // 2.独立按键扫描(2)
 654   3                              Change_Keys();        // 3.矩阵按键扫描
 655   3                              if (GN == 16) {  // S16
 656   4                                      // =========================================== 代码开始 ======================================
 657   4                                      LED1_On();
 658   4                                      // =========================================== 代码结束 ======================================
 659   4                                      while(Scan_Keys());
 660   4                                      // =========================================== 代码开始 ======================================
 661   4                                      LED1_Off();
 662   4                                      dis_model ++ ;
 663   4                                      if (dis_model > 4) dis_model = 0;
 664   4                                      // =========================================== 代码结束 ======================================
 665   4                              }
 666   3                              
 667   3                              if (GN == 12) {  // S12
 668   4                                      // =========================================== 代码开始 ======================================
 669   4                                      LED2_On();
 670   4                                      // =========================================== 代码结束 ======================================
 671   4                                      while(Scan_Keys());
 672   4                                      // =========================================== 代码开始 ======================================
 673   4                                      LED2_Off();
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 12  

 674   4                                      f_time = ~f_time;
 675   4                                      // =========================================== 代码结束 ======================================
 676   4                              }
 677   3                              
 678   3                              if (GN == 8) {  // S8
 679   4                                      // =========================================== 代码开始 ======================================
 680   4                                      LED5_On();
 681   4                                      // =========================================== 代码结束 ======================================
 682   4                                      while(Scan_Keys());
 683   4                                      // =========================================== 代码开始 ======================================
 684   4                                      LED5_Off();
 685   4                                      
 686   4                                      // 时间加
 687   4                                      if (set_ds1302_key_modele == 1) {  // 小时设置
 688   5                                              set_ds1302_h ++ ;
 689   5                                              if (set_ds1302_h > 23) set_ds1302_h = 0;
 690   5                                      }
 691   4                                      else if (set_ds1302_key_modele == 2) {  // 分钟设置
 692   5                                              set_ds1302_m ++ ;
 693   5                                              if (set_ds1302_m > 59) set_ds1302_m = 0;
 694   5                                      }
 695   4                                      else if (set_ds1302_key_modele == 3) {  // 秒设置
 696   5                                              set_ds1302_s ++ ;
 697   5                                              if (set_ds1302_s > 59) set_ds1302_s = 0;
 698   5                                      }
 699   4                                      
 700   4                                      // =========================================== 代码结束 ======================================
 701   4                              }
 702   3                              
 703   3                              if (GN == 9) {  // S9
 704   4                                      // =========================================== 代码开始 ======================================
 705   4                                      LED5_On();
 706   4                                      // =========================================== 代码结束 ======================================
 707   4                                      while(Scan_Keys());
 708   4                                      // =========================================== 代码开始 ======================================
 709   4                                      LED5_Off();
 710   4                                      
 711   4                                      // 时间减
 712   4                                      if (set_ds1302_key_modele == 1) {  // 小时设置
 713   5                                              set_ds1302_h -- ;
 714   5                                              if (set_ds1302_h < 0) set_ds1302_h = 23;
 715   5                                      }
 716   4                                      else if (set_ds1302_key_modele == 2) {  // 分钟设置
 717   5                                              set_ds1302_m -- ;
 718   5                                              if (set_ds1302_m < 0) set_ds1302_m = 59;
 719   5                                      }
 720   4                                      else if (set_ds1302_key_modele == 3) {  // 秒设置
 721   5                                              set_ds1302_s -- ;
 722   5                                              if (set_ds1302_s < 0) set_ds1302_s = 59;
 723   5                                      }
 724   4                                      // =========================================== 代码结束 ======================================
 725   4                              }
 726   3      
 727   3                              if (GN == 4) {  // S4
 728   4                                      // =========================================== 代码开始 ======================================
 729   4                                      LED3_On();
 730   4                                      is_key_set_time = 1;  // 按键按下未松开
 731   4                                      
 732   4                                      
 733   4                                      // =========================================== 代码结束 ======================================
 734   4                                      while(Scan_Keys());
 735   4                                      // =========================================== 代码开始 ======================================
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 13  

 736   4                                      LED3_Off();
 737   4                                      LED4_Off();
 738   4                                      is_key_set_time = 0;  // 按键按下松开
 739   4                                      num_s_key = 0;
 740   4                                      
 741   4                                      if (f_key_long) {  // 长按转换模式
 742   5                                              set_ds1302_key_modele ++ ;
 743   5                                              f_key_long = 0;
 744   5                                      }
 745   4                                      
 746   4                                      
 747   4      //                              if (set_ds1302_key_modele == 1) {  // 小时设置
 748   4      //                                      set_ds1302_h = 23;
 749   4      //                              }
 750   4      //                              else if (set_ds1302_key_modele == 2) {  // 分钟设置
 751   4      //                                      set_ds1302_m = 29;
 752   4      //                              }
 753   4      //                              else if (set_ds1302_key_modele == 3) {  // 秒设置
 754   4      //                                      set_ds1302_s = 45;
 755   4      //                              }
 756   4                                      if (set_ds1302_key_modele == 4) {  // 确认
 757   5                                              if (dis_model == 2) {
 758   6                                                      dat[0] = set_ds1302_h;
 759   6                                                      dat[1] = set_ds1302_m;
 760   6                                                      dat[2] = set_ds1302_s;
 761   6                                                      Write_24C02_Page(0x01, dat, 3);
 762   6                                                      
 763   6                                                      dat1 = dat[0] /10*16 + dat[0] % 10;
 764   6                                                      dat2 = dat[1] /10*16 + dat[1] % 10;
 765   6                                                      dat3 = dat[2] /10*16 + dat[2] % 10;
 766   6      
 767   6                                                      My_Write_Ds1302();
 768   6                                              }
 769   5                                              set_ds1302_key_modele = 0;
 770   5                                      }
 771   4                                      // =========================================== 代码结束 ======================================
 772   4                              }
 773   3                              /*根据需要添加对应按键*/
 774   3                              // =======================按键结束========================
 775   3                              
 776   3                              // =======================串口调试开始====================
 777   3                              if(command != 0x00)
 778   3                              {
 779   4                                      switch(command & 0xf0)
 780   4                                      {
 781   5                                              case 0xa0:
 782   5                                                      P0 = temp_Led_P0;
 783   5                                                      P2 = (P2 & 0x1f) | 0x80;  // LED
 784   5                                                      P0 = (P0 | 0x0f) & ((~command) | 0xf0);
 785   5                                                      temp_Led_P0 = P0;
 786   5                                                      P2 &= 0x1f;
 787   5                                                      command = 0x00;
 788   5                                              break;
 789   5                                              case 0xb0:
 790   5                                                      P0 = temp_Led_P0;
 791   5                                                      P2 = (P2 & 0x1f) | 0x80;  // LED
 792   5                                                      P0 = (P0 | 0xf0) & (((~command) << 4) | 0x0f);
 793   5                                                      temp_Led_P0 = P0;
 794   5                                                      P2 &= 0x1f;
 795   5                                                      command = 0x00;
 796   5                                              break;
 797   5                                              case 0xc0:
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 14  

 798   5                                                      Send_String("system is running...!\r\n");
 799   5                                                      command = 0x00;
 800   5                                              break;
 801   5                                      }
 802   4                              }
 803   3                              // =======================串口调试结束====================              
 804   3                              
 805   3                              // =========================================== 代码开始 ======================================                  
 806   3                              // =======================1.温度读取开始========================
 807   3                              if (f_200ms_temperature) {
 808   4                                      f_200ms_temperature = 0;
 809   4                                      temperature = Read_Temperature();
 810   4                                      My_Read_Ds1302();
 811   4                              }
 812   3      //                      num1=10;num2=10;num3=10;num4=10;
 813   3      //                      num5=temperature/1000;num6=temperature/100%10;
 814   3      //                      num7=temperature/10%10;num8=temperature%10;
 815   3                              // =======================1.温度读取结束========================
 816   3                              
 817   3                              dat[0] = ds1302_h;
 818   3                              dat[1] = ds1302_m;
 819   3                              dat[2] = ds1302_s;
 820   3                              Write_24C02_Page(0x01, dat, 3);
 821   3                              
 822   3                              if (dis_model == 0) {  // 时间显示
 823   4                                      num1=ds1302_h/10;num2=ds1302_h%10;num3=11;
 824   4                                      num4=ds1302_m/10;num5=ds1302_m%10;num6=11;
 825   4                                      num7=ds1302_s/10;num8=ds1302_s%10;
 826   4                              }
 827   3                              else if (dis_model == 1) {  // 温度显示
 828   4                                      num1=dis_model;num2=10;num3=10;num4=10;
 829   4                                      num5=temperature/1000;num6=temperature/100%10;
 830   4                                      num7=temperature/10%10;num8=temperature%10;
 831   4                              }
 832   3                              else if (dis_model == 2) {  // 时间设置
 833   4      //                              num_On_Off = Read_24C02_Byte(0x00);
 834   4      //                              num_On_Off ++ ;
 835   4      //                              Write_24C02_Byte(0x00, num_On_Off);
 836   4                                      f_set_time = 1;  // 时间设置标志
 837   4                                      num1 = set_ds1302_h / 10; num2 = set_ds1302_h % 10; num3 = 11; 
 838   4                                      num4 = set_ds1302_m / 10; num5 = set_ds1302_m % 10; num6 = 11;
 839   4                                      num7 = set_ds1302_s / 10, num8 = set_ds1302_s % 10;
 840   4      
 841   4                              }
 842   3                              else if (dis_model == 3) {
 843   4                                      num1 = dis_model;num2 = 10; num3 = 10; num4 = 10;
 844   4                                      num5= 10;
 845   4                                      num6=distance / 100; num7=distance % 100 / 10; num8=distance % 10;
 846   4                              }
 847   3                              else if (dis_model ==4) {
 848   4                                      num1=dis_model;num2=dat[0]%10;num3=11;
 849   4                                      num4=dat[1]/10;num5=dat[1]%10;num6=11;
 850   4                                      num7=dat[2]/10;num8=dat[2]%10;
 851   4                              }
 852   3                              // =========================================== 代码结束 ======================================
 853   3              }
 854   2          }
 855   1      }
 856          
 857          void Service_T1() interrupt 3
 858          {
 859   1              TH1 = (65536 - 2000) / 256;
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 15  

 860   1              TL1 = (65536 - 2000) % 256;
 861   1              
 862   1              f_2ms = 1;
 863   1              
 864   1              /***************************************************
 865   1              与时间相关的变量的更新放在里面
 866   1              注意：不要把消耗过长时间的代码（如for循环等）放在这里，容易造成错乱
 867   1              ***************************************************/
 868   1              // =========================================== 代码开始 ======================================
 869   1              num_2ms ++ ;
 870   1              num_2ms_temperature ++ ;
 871   1              if (num_2ms_temperature == 100) {
 872   2                      f_200ms_temperature = 1;
 873   2                      num_2ms_temperature = 0;
 874   2              }
 875   1              
 876   1              if (num_2ms == 500) {
 877   2                      f_1s = 1;
 878   2                      num_2ms = 0;
 879   2              }
 880   1              
 881   1              if (f_1s == 1) {
 882   2                      f_1s = 0;
 883   2                      
 884   2                      if (f_time) num_s ++ ;
 885   2                      
 886   2                      if (is_key_set_time && dis_model == 2) {
 887   3                              num_s_key ++ ;
 888   3      //                      t_key = 0;
 889   3                              if (num_s_key == 3) {
 890   4                                      LED4_On();
 891   4                                      f_key_long = 1;
 892   4                              }
 893   3                      }                       
 894   2                              
 895   2                      
 896   2                      if (num_s == 9) 
 897   2                              num_s = 0;
 898   2              }
 899   1              // =========================================== 代码结束 ======================================
 900   1              
 901   1              Display_SMG(num1,num2,num3,num4,num5,num6,num7,num8);//2ms刷新数码管
 902   1      }
 903          
 904          void ServiceUart() interrupt 4
 905          {
 906   1              if(RI == 1)
 907   1              {
 908   2                      RI = 0;//人工清零
 909   2                      urdat = SBUF;
 910   2                      command = SBUF;
 911   2      //              Send_Byte(urdat + 1);
 912   2      //              send_byte(0x5a);
 913   2      //              send_byte(0xa5);
 914   2              }
 915   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2682    ----
   CONSTANT SIZE    =     57    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              04/08/2024 23:55:15 PAGE 16  

   PDATA SIZE       =   ----    ----
   DATA SIZE        =     51      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      8    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
