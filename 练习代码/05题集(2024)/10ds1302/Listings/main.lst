C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "reg52.h"
   2          #include "onewire.h"
   3          #include "iic.h"
   4          #include "ds1302.h"
   5          
   6          #define uchar unsigned char 
   7          #define uint unsigned int
   8          
   9          // 数码管显示数据， 一般前10个为0-9， 可更具需要往里面添加
  10          uchar code type1[] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0xff,0xbf,0x8e,0xc8,0xc1};
  11          // xxx
  12          uchar code type2[] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
  13          
  14          uchar num1,num2,num3,num4,num5,num6,num7,num8;  // 数码管每一位（例如 num1 = 2, 第一个数码管显示 2）
  15          uchar GN;  // 按键标志位
  16          bit f_2ms, f_50ms, f_200ms_temperature;  // 2ms, 50ms, 500ms标志位
  17          uchar temp_Led_P0 = 0xff;  // 用来存上一次LED状态
  18          uint temperature;  // 温度
  19          uint num_2ms_temperature;  // 多少个2ms
  20          uchar ds1302_h, ds1302_m, ds1302_s;  // 
  21          
  22          uchar dis_model = 0;  // 0:显示温度（DS18B20）， 1:显示时钟
  23          
  24          sbit S7 = P3^0;
  25          sbit S6 = P3^1;
  26          sbit S5 = P3^2;
  27          sbit S4 = P3^3;
  28          
  29          sbit L0 = P0^0;
  30          sbit L1 = P0^1;
  31          sbit L2 = P0^2;
  32          sbit L3 = P0^3;
  33          sbit L4 = P0^4;
  34          sbit L5 = P0^5;
  35          sbit L6 = P0^6;
  36          
  37          // =========================================== 代码开始 ======================================
  38          bit f_1s;  // 1s标志位
  39          
  40          uint num_2ms = 0, num_s = 0;  // 多少个2ms, 1s
  41          
  42          uchar urdat;    
  43          
  44          bit dis_s4;
  45          // =========================================== 代码结束 ======================================
  46          
  47          
  48          //=========================================普通延时函数(模板函数)=================================
  49          void Delay(uint t) {
  50   1              while( t -- );
  51   1              while( t -- );
  52   1      }
  53          //=======================================单个LED控制函数(模板函数)================================
  54          // 根据项目需要删减
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 2   

  55          
  56          // ======================LED0====================
  57          void LED0_On() {
  58   1              P0 = 0xff & temp_Led_P0;  // 清除其他地方对P0的值（特别是数码管一直在刷新），并且结合LED前一次的状态
  59   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  60   1              L0 = 0;  // 要将P0放在这两句代码之间，避免错乱
  61   1              temp_Led_P0 = P0;
  62   1              P2 &= 0x1f;
  63   1      }
  64          void LED0_Off() {
  65   1              P0 = 0xff & temp_Led_P0;
  66   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  67   1              L0 = 1;  // 要将P0放在这两句代码之间，避免错乱
  68   1              temp_Led_P0 = P0;
  69   1              P2 &= 0x1f;
  70   1      }
  71          // ======================LED1====================
  72          void LED1_On() {
  73   1              P0 = 0xff & temp_Led_P0;  // 清除其他地方对P0的值（特别是数码管一直在刷新），并且结合LED前一次的状态
  74   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  75   1              L1 = 0;  // 要将P0放在这两句代码之间，避免错乱
  76   1              temp_Led_P0 = P0;
  77   1              P2 &= 0x1f;
  78   1      }
  79          void LED1_Off() {
  80   1              P0 = 0xff & temp_Led_P0;
  81   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  82   1              L1 = 1;  // 要将P0放在这两句代码之间，避免错乱
  83   1              temp_Led_P0 = P0;
  84   1              P2 &= 0x1f;
  85   1      }
  86          // ======================LED2====================
  87          void LED2_On() {
  88   1              P0 = 0xff & temp_Led_P0;
  89   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  90   1              L2 = 0;  // 要将P0放在这两句代码之间，避免错乱
  91   1              temp_Led_P0 = P0;
  92   1              P2 &= 0x1f;
  93   1      }
  94          void LED2_Off() {
  95   1              P0 = 0xff & temp_Led_P0;
  96   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
  97   1              L2 = 1;  // 要将P0放在这两句代码之间，避免错乱
  98   1              temp_Led_P0 = P0;
  99   1              P2 &= 0x1f;
 100   1      }
 101          // ======================LED3====================
 102          void LED3_On() {
 103   1              P0 = 0xff & temp_Led_P0;
 104   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 105   1              L3 = 0;  // 要将P0放在这两句代码之间，避免错乱
 106   1              temp_Led_P0 = P0;
 107   1              P2 &= 0x1f;
 108   1      }
 109          void LED3_Off() {
 110   1              P0 = 0xff & temp_Led_P0;
 111   1              P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 112   1              L3 = 1;  // 要将P0放在这两句代码之间，避免错乱
 113   1              temp_Led_P0 = P0;
 114   1              P2 &= 0x1f;
 115   1      }
 116          //// ======================LED4====================
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 3   

 117          //void LED4_On() {
 118          //      P0 = 0xff & temp_Led_P0;
 119          //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 120          //      L4 = 0;  // 要将P0放在这两句代码之间，避免错乱
 121          //      temp_Led_P0 = P0;
 122          //      P2 &= 0x1f;
 123          //}
 124          //void LED4_Off() {
 125          //      P0 = 0xff & temp_Led_P0 & temp_Led_P0;
 126          //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 127          //      L4 = 1;  // 要将P0放在这两句代码之间，避免错乱
 128          //      temp_Led_P0 = P0;
 129          //      P2 &= 0x1f;
 130          //}
 131          //// ======================LED5====================
 132          //void LED5_On() {
 133          //      P0 = 0xff & temp_Led_P0;
 134          //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 135          //      L5 = 0;  // 要将P0放在这两句代码之间，避免错乱
 136          //      temp_Led_P0 = P0;
 137          //      P2 &= 0x1f;
 138          //}
 139          //void LED5_Off() {
 140          //      P0 = 0xff & temp_Led_P0;
 141          //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 142          //      L5 = 1;  // 要将P0放在这两句代码之间，避免错乱
 143          //      temp_Led_P0 = P0;
 144          //      P2 &= 0x1f;
 145          //}
 146          //// ======================LED6====================
 147          //void LED6_On() {
 148          //      P0 = 0xff & temp_Led_P0;
 149          //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 150          //      L6 = 0;  // 要将P0放在这两句代码之间，避免错乱
 151          //      temp_Led_P0 = P0;
 152          //      P2 &= 0x1f;
 153          //}
 154          //void LED6_Off() {
 155          //      P0 = 0xff & temp_Led_P0;
 156          //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 157          //      L6 = 1;  // 要将P0放在这两句代码之间，避免错乱
 158          //      temp_Led_P0 = P0;
 159          //      P2 &= 0x1f;
 160          //}
 161          //=========================================数码管显示==============================================
 162          void Display_SMG(uchar n1,uchar n2,uchar n3,uchar n4,uchar n5,uchar n6,uchar n7,uchar n8)
 163          {
 164   1              char i;
 165   1              P0 = 0xff;
 166   1              P2 = (P2 & 0x1f) | 0xc0;//数码管位选
 167   1              P0 = type2[i];
 168   1              P2 &= 0x1f;
 169   1              switch(i)//数码管位选
 170   1              {
 171   2                      case 0:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n1];P2 &= 0x1f;break;
 172   2                      case 1:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n2];P2 &= 0x1f;break;
 173   2                      case 2:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n3];P2 &= 0x1f;break;
 174   2                      case 3:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n4];P2 &= 0x1f;break;
 175   2                      case 4:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n5];P2 &= 0x1f;break;
 176   2                      case 5:P2 = (P2 & 0x1f) | 0xe0;
 177   2                                                                              if(dis_model == 1)  // 根据需要的条件
 178   2                                                                              {
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 4   

 179   3                                                                                      P0 = type1[n6]&0x7f;  // 加入小数点
 180   3                                                                              }
 181   2                                                                              else
 182   2                                                                                      P0 = type1[n6];
 183   2                                                                                                        P2 &= 0x1f;break;
 184   2                      case 6:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n7];P2 &= 0x1f;break;
 185   2                      case 7:P2 = (P2 & 0x1f) | 0xe0;P0 = type1[n8];P2 &= 0x1f;break;
 186   2              }
 187   1              if(++i==8)
 188   1                      i = 0;
 189   1      }
 190          //============================================独立按键============================================
 191          /***************************************************
 192          写法一：
 193          有按键被按下，GN标记，后面根据需要功能进行操作
 194          ***************************************************/
 195          void Delay_Keys(uint t)
 196          {
 197   1              while(t--);
 198   1      }
 199          uchar Scan_Keys_Alone()
 200          {
 201   1              char d;
 202   1              d = (~P3) & 0x0f;
 203   1              if(d == 0) return 0;
 204   1              Delay_Keys(100);
 205   1              if(d == 0) return 0;
 206   1              Delay_Keys(100);
 207   1              return d;
 208   1      }
 209          void Change_Keys_Alone()
 210          {
 211   1              switch(Scan_Keys_Alone())
 212   1              {
 213   2                      case 8:GN = 1;break;//S4
 214   2                      case 4:GN = 2;break;//S5
 215   2                      case 2:GN = 3;break;//S6
 216   2                      case 1:GN = 4;break;//S7
 217   2                      case 0:GN = 0;break;
 218   2              }
 219   1      }
 220          
 221          /***************************************************
 222          写法二：
 223          有按键被按下，按下是一种状态，松开是另一种状态
 224          （如：按下时某个灯亮，松开时灯灭）
 225          ***************************************************/
 226          //void ScanKeys_Alone() 
 227          //{
 228          //      if (S7 == 0) {
 229          //              Delay_Keys(100);
 230          //              if (S7 == 0) {
 231          //                      // =========================================== 代码开始 ======================================
 232          //                      
 233          //                      // =========================================== 代码结束 ======================================
 234          //                      while(S7 == 0);
 235          //                      // =========================================== 代码开始 ======================================
 236          
 237          //                      // =========================================== 代码结束 ======================================
 238          //              }
 239          //      }
 240          //      
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 5   

 241          //      if (S6 == 0) {
 242          //              Delay_Keys(100);
 243          //              if (S6 == 0) {
 244          //                      // =========================================== 代码开始 ======================================
 245          //                      
 246          //                      // =========================================== 代码结束 ======================================
 247          //                      while(S6 == 0);
 248          //                      // =========================================== 代码开始 ======================================
 249          
 250          //                      // =========================================== 代码结束 ======================================
 251          //              }
 252          //      }
 253          //      
 254          //      if (S5 == 0) {
 255          //              Delay_Keys(100);
 256          //              if (S5 == 0) {
 257          //                      // =========================================== 代码开始 ======================================
 258          
 259          //                      // =========================================== 代码结束 ======================================
 260          //                      while(S5 == 0);
 261          //                      // =========================================== 代码开始 ======================================
 262          
 263          //                      // =========================================== 代码结束 ======================================
 264          //              }
 265          //      }
 266          
 267          //      if (S4 == 0) {
 268          //              Delay_Keys(100);
 269          //              if (S4 == 0) {
 270          //                      // =========================================== 代码开始 ======================================
 271          
 272          //                      // =========================================== 代码结束 ======================================
 273          //                      while(S4 == 0);
 274          //                      // =========================================== 代码开始 ======================================
 275          
 276          //                      // =========================================== 代码结束 ======================================
 277          //              }
 278          //      }
 279          //}
 280          
 281          // ================= 代码结束 =============
 282          
 283          //============================================矩阵按键============================================
 284          sfr P4 = 0xc0;
 285          sbit P44 = P4^4;
 286          sbit P42 = P4^2;
 287          
 288          uchar Scan_Keys()
 289          {
 290   1              char H,L;
 291   1              P3 =  0xcf;P44 = 0;P42 = 0;H = (~P3) & 0x0f;
 292   1              if(H == 0) return 0;
 293   1              Delay_Keys(100);
 294   1              P3 =  0xcf;P44 = 0;P42 = 0;H = (~P3) & 0x0f;
 295   1              if(H == 0) return 0;
 296   1              P3 =  0xf0;P44 = 1;P42 = 1;L = (~P3) & 0x30;
 297   1              if(P44 == 0) L |= 0x80;
 298   1              if(P42 == 0) L |= 0x40;
 299   1              return (H+L);
 300   1      }
 301          
 302          void Change_Keys()
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 6   

 303          {
 304   1              switch(Scan_Keys())
 305   1              {
 306   2                      case 0x88:GN = 4;break;  // S4
 307   2                      case 0x84:GN = 5;break;  // S5
 308   2                      case 0x82:GN = 6;break;  // S6
 309   2                      case 0x81:GN = 7;break;  // S7
 310   2                      case 0x48:GN = 8;break;  // S8
 311   2                      case 0x44:GN = 9;break;  // S9
 312   2                      case 0x42:GN = 10;break;  // S10
 313   2                      case 0x41:GN = 11;break;  // S11
 314   2                      case 0x28:GN = 12;break;  // S12
 315   2                      case 0x24:GN = 13;break;  // S13
 316   2                      case 0x22:GN = 14;break;  // S14
 317   2                      case 0x21:GN = 15;break;  // S15
 318   2                      case 0x18:GN = 16;break;  // S16
 319   2                      case 0x14:GN = 17;break;  // S17
 320   2                      case 0x12:GN = 18;break;  // S18
 321   2                      case 0x11:GN = 19;break;  // S19
 322   2                      case 0:GN = 0;break;
 323   2              }
 324   1      }
 325          //============================================24C02初始化============================================
 326          void Write_24C02(unsigned char addr,unsigned char dat)
 327          {
 328   1              I2CStart();
 329   1              I2CSendByte(0xa0);
 330   1              I2CWaitAck();
 331   1              I2CSendByte(addr);
 332   1              I2CWaitAck();
 333   1              I2CSendByte(dat);
 334   1              I2CWaitAck();
 335   1              I2CStop(); 
 336   1      }
 337          
 338          unsigned char Read_24C02(unsigned char addr)
 339          {
 340   1              unsigned char tmp;
 341   1              I2CStart();
 342   1              I2CSendByte(0xa0);
 343   1              I2CWaitAck();
 344   1              I2CSendByte(addr);
 345   1              I2CWaitAck();
 346   1              
 347   1              I2CStart();
 348   1              I2CSendByte(0xa1);
 349   1              I2CWaitAck();
 350   1              tmp = I2CRecByte(); 
*** WARNING C206 IN LINE 350 OF main.c: 'I2CRecByte': missing function-prototype
 351   1              I2CSendAck(1);
 352   1              I2CStop();
 353   1              
 354   1              return tmp;
 355   1      }
 356          //============================================DS18B20初始化============================================
 357          void Init_18b20()
 358          {
 359   1              init_ds18b20();
 360   1              Write_DS18B20(0xcc);
 361   1              Write_DS18B20(0x4e);
 362   1              Write_DS18B20(0x00);
 363   1              Write_DS18B20(0x00);
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 7   

 364   1              Write_DS18B20(0x7f);
 365   1      }
 366          unsigned int Read_Temperature(void)  // 当需要保留2为小数时，才需要用到unsigned int,
 367                                                                                   // 这里介绍3种类型，所以用unsigned int，保留整数
 368                                                                           // 和一位小数可用unsigned char.
 369          {
 370   1              unsigned char H,L;
 371   1              init_ds18b20();
 372   1              Write_DS18B20(0xcc);
 373   1              Write_DS18B20(0xbe);
 374   1              L = Read_DS18B20();
 375   1              H = Read_DS18B20();
 376   1              
 377   1              init_ds18b20();
 378   1              Write_DS18B20(0xcc);
 379   1              Write_DS18B20(0x44);
 380   1              
 381   1              //1.保留整数--23
 382   1              //temp = (H<<4) + (L>>4);
 383   1              
 384   1              //2.保留1位小数--23.4
 385   1              //temp = ((H<<8) + L)*5/8;
 386   1              
 387   1              //3.保留2位小数--23.45
 388   1              return ((H<<8)+L)*25/4;  // (50/8)
 389   1      }
 390          //============================================Ds1302初始化============================================
 391          void My_Write_Ds1302()
 392          {
 393   1              Write_Ds1302_Byte(0x8e,0x00);
 394   1              Write_Ds1302_Byte(0x84,0x23);//时
 395   1              Write_Ds1302_Byte(0x82,0x59);//分
 396   1              Write_Ds1302_Byte(0x80,0x45);//秒
 397   1      }
 398          void My_Read_Ds1302()
 399          {
 400   1              ds1302_h = Read_Ds1302_Byte(0x85);//时
 401   1              ds1302_h = (ds1302_h >> 4) * 10 + (ds1302_h & 0x0f);
 402   1              ds1302_m = Read_Ds1302_Byte(0x83);//分
 403   1              ds1302_m = (ds1302_m >> 4) * 10 + (ds1302_m & 0x0f);
 404   1              ds1302_s = Read_Ds1302_Byte(0x81);//秒
 405   1              ds1302_s = (ds1302_s >> 4) * 10 + (ds1302_s & 0x0f);
 406   1      }
 407          //============================================定时器T0初始化=======================================
 408          uchar count = 0;
 409          uchar pwm_dut = 0;//占空比
 410          void Init_T0()
 411          {
 412   1              TMOD = (TMOD & 0xf0) | 0x01;  // 定时
 413   1              TH0 = (65536 - 2000) / 256;
 414   1              TL0 = (65536 - 2000) % 256;
 415   1              
 416   1              EA = 1;
 417   1              ET0 = 1;
 418   1              TR0 = 1;
 419   1      }
 420          //============================================定时器T1初始化=======================================
 421          //void Init_T1()
 422          //{
 423          //      TMOD = (TMOD & 0x0f) | 0x10;//定时
 424          //      TH1 = (65536 - 2000) / 256;//2ms
 425          //      TL1 = (65536 - 2000) % 256;
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 8   

 426          //      
 427          //      EA = 1;
 428          //      ET1 = 1;
 429          //      TR1 = 1;
 430          //}
 431          //============================================串口初始化============================================
 432          #include "intrins.h"
 433          #include "string.h"
 434          
 435          sfr AUXR = 0x8e;  // 辅助寄存器
 436          #define BAUD         9600
 437          //#define SYSTEMCLOCK  11059200L
 438          #define SYSTEMCLOCK  12000000L
 439          uchar command = 0x00;
 440          void Init_Uart()
 441          {
 442   1              TMOD = (TMOD & 0x0f) | 0x00;
 443   1              TL1 = (65535-(SYSTEMCLOCK / 4 / BAUD));
 444   1              TH1 = (65535-(SYSTEMCLOCK / 4 / BAUD)) >> 8l;
 445   1      //      ET1 = 0;                    //禁止定时器1中断
 446   1              TR1 = 1;                    //启动定时器1
 447   1              
 448   1              SCON = 0x50;
 449   1              AUXR = 0x40;
 450   1              
 451   1              ES = 1;
 452   1              EA = 1;
 453   1              
 454   1      //      SCON = 0x50;            //8位数据,可变波特率
 455   1      //      AUXR &= 0xBF;           //定时器1时钟为Fosc/12,即12T
 456   1      //      AUXR &= 0xFE;           //串口1选择定时器1为波特率发生器
 457   1      //      TMOD &= 0x0F;           //设定定时器1为16位自动重装方式
 458   1      //      TL1 = 0xE8;             //设定定时初值
 459   1      //      TH1 = 0xFF;             //设定定时初值
 460   1      //      ET1 = 0;                //禁止定时器1中断
 461   1      
 462   1      //      ES = 1;
 463   1      //      EA = 1;  
 464   1      //      TR1 = 1;                //启动定时器1
 465   1      }
 466          // 发送一个字节数据
 467          void Send_Byte(unsigned char dat)
 468          {
 469   1              SBUF = dat;
 470   1              while(TI == 0);
 471   1              TI = 0;
 472   1      }
 473          //发送一串字符串
 474          void Send_String(unsigned char* str)
 475          {
 476   1        
 477   1        while(*str != '\0')
 478   1        {
 479   2          Send_Byte(*(str++));
 480   2        }
 481   1      }
 482          //==========================================系统初始化=============================================
 483          void Init_Sys()
 484          {
 485   1              P2 = (P2 & 0x1f) | 0x80;  // LED
 486   1              P0 = 0xff;
 487   1              P2 &= 0x1f;
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 9   

 488   1              P2 = (P2 & 0x1f) | 0xa0;  // 蜂鸣器，寄存器
 489   1              P0 = 0x00;
 490   1              P2 &= 0x1f;
 491   1              P2 = (P2 & 0x1f) | 0xc0;  // 数码管
 492   1              P0 = 0xff;
 493   1              P2 &= 0x1f;
 494   1              P2 = (P2 & 0x1f) | 0xe0;
 495   1              P0 = 0xff;
 496   1              
 497   1              num1=num2=num3=num4=num5=num6=num7=num8=10;
 498   1      }
 499          
 500          void LED_control() {
 501   1              // ================= 测试开始 =============
 502   1      //      P2 = (P2 & 0x1f) | 0x80;  // LED控制开启
 503   1      //      P0 = 0x7f;  // 要将P0放在这两句代码之间，避免错乱
 504   1      //      P2 &= 0x1f;
 505   1              // ================= 测试结束 =============
 506   1              
 507   1              // =========================================== 代码开始 ======================================
 508   1              
 509   1              // =========================================== 代码结束 ======================================
 510   1      }
 511          
 512          void main()
 513          {
 514   1              Init_Sys();
 515   1      //      Init_T1();
 516   1              Init_T0();
 517   1              Init_18b20();
 518   1              My_Write_Ds1302();
 519   1              Init_Uart();
 520   1      //      Send_String("I am OK\r\n");
 521   1              
 522   1              while(1)
 523   1              {
 524   2      //              LED_control();
 525   2              if(f_2ms == 1)
 526   2              {
 527   3                  f_2ms = 0;                  
 528   3                              LED_control();  // xxx  
 529   3                              // =======================按键开始========================
 530   3                              /*根据需要选择对应的按键类型*/
 531   3      //                      Change_Keys_Alone();  // 1.独立按键扫描(1)
 532   3      //                      ScanKeys_Alone();     // 2.独立按键扫描(2)
 533   3                              Change_Keys();        // 3.矩阵按键扫描
 534   3                              if (GN == 16) {  // S16
 535   4                                      // =========================================== 代码开始 ======================================
 536   4                                      LED1_On();
 537   4                                      // =========================================== 代码结束 ======================================
 538   4                                      while(Scan_Keys());
 539   4                                      // =========================================== 代码开始 ======================================
 540   4                                      LED1_Off();
 541   4                                      dis_model ++ ;
 542   4                                      if (dis_model > 3) dis_model = 0;
 543   4                                      // =========================================== 代码结束 ======================================
 544   4                              }
 545   3                              
 546   3                              if(GN == 4) {
 547   4                                      dis_s4 = 1;
 548   4                                      while(Scan_Keys());
 549   4                                      dis_s4 = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 10  

 550   4                              }
 551   3                              /*根据需要添加对应按键*/
 552   3                              // =======================按键结束========================
 553   3                              
 554   3                              // =======================串口调试开始====================
 555   3                              if(command != 0x00)
 556   3                              {
 557   4                                      switch(command & 0xf0)
 558   4                                      {
 559   5                                              case 0xa0:
 560   5                                                      P0 = temp_Led_P0;
 561   5                                                      P2 = (P2 & 0x1f) | 0x80;  // LED
 562   5                                                      P0 = (P0 | 0x0f) & ((~command) | 0xf0);
 563   5                                                      temp_Led_P0 = P0;
 564   5                                                      P2 &= 0x1f;
 565   5                                                      command = 0x00;
 566   5                                              break;
 567   5                                              case 0xb0:
 568   5                                                      P0 = temp_Led_P0;
 569   5                                                      P2 = (P2 & 0x1f) | 0x80;  // LED
 570   5                                                      P0 = (P0 | 0xf0) & (((~command) << 4) | 0x0f);
 571   5                                                      temp_Led_P0 = P0;
 572   5                                                      P2 &= 0x1f;
 573   5                                                      command = 0x00;
 574   5                                              break;
 575   5                                              case 0xc0:
 576   5                                                      Send_String("system is running...!\r\n");
 577   5                                                      command = 0x00;
 578   5                                              break;
 579   5                                      }
 580   4                              }
 581   3                              // =======================串口调试结束====================              
 582   3                              
 583   3                              // =========================================== 代码开始 ======================================                  
 584   3                              // =======================1.温度读取开始========================
 585   3                              if (f_200ms_temperature) {
 586   4                                      f_200ms_temperature = 0;
 587   4                                      temperature = Read_Temperature();
 588   4                                      My_Read_Ds1302();
 589   4                              }
 590   3      //                      num1=10;num2=10;num3=10;num4=10;
 591   3      //                      num5=temperature/1000;num6=temperature/100%10;
 592   3      //                      num7=temperature/10%10;num8=temperature%10;
 593   3                              // =======================1.温度读取结束========================
 594   3                              
 595   3                              if (dis_model == 0) {  // 时间显示
 596   4                                      num1=ds1302_h/10;num2=ds1302_h%10;num3=11;
 597   4                                      num4=ds1302_m/10;num5=ds1302_m%10;num6=11;
 598   4                                      num7=ds1302_s/10;num8=ds1302_s%10;
 599   4                              }
 600   3                              else if (dis_model == 1) {  // 温度显示
 601   4                                      num1=dis_model;num2=10;num3=10;num4=10;
 602   4                                      num5=temperature/1000;num6=temperature/100%10;
 603   4                                      num7=temperature/10%10;num8=temperature%10;
 604   4                              }
 605   3                              else if (dis_model == 2) {
 606   4                                      num1 = dis_model;
 607   4                                      num2 = 0; num3 = 2; num4 = 4;
 608   4                                      num5=num6=11;
 609   4                                      num7=num_s / 10, num8=num_s % 10;
 610   4                              }
 611   3                              else if (dis_model == 3) {
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 11  

 612   4                                      num1 = dis_model;num2 = 0; num3 = 2; num4 = 4;
 613   4                                      num5=num6=11;
 614   4                                      num7=num_s / 10, num8=num_s % 10;
 615   4                              }
 616   3                              // =========================================== 代码结束 ======================================
 617   3              }
 618   2          }
 619   1      }
 620          
 621          void Service_T0() interrupt 1
 622          {
 623   1              TH0 = (65536 - 2000) / 256;
 624   1              TL0 = (65536 - 2000) % 256;
 625   1              
 626   1              f_2ms = 1;
 627   1              
 628   1              /***************************************************
 629   1              与时间相关的变量的更新放在里面
 630   1              注意：不要把消耗过长时间的代码（如for循环等）放在这里，容易造成错乱
 631   1              ***************************************************/
 632   1              // =========================================== 代码开始 ======================================
 633   1              num_2ms ++ ;
 634   1              num_2ms_temperature ++ ;
 635   1              if (num_2ms_temperature == 100) {
 636   2                      f_200ms_temperature = 1;
 637   2                      num_2ms_temperature = 0;
 638   2              }
 639   1              
 640   1              if (num_2ms == 500) {
 641   2                      f_1s = 1;
 642   2                      num_2ms = 0;
 643   2              }
 644   1              if (f_1s == 1) {
 645   2                      f_1s = 0;
 646   2                      num_s ++ ;
 647   2                      if (num_s == 9) 
 648   2                      num_s = 0;
 649   2              }
 650   1              
 651   1              if (dis_s4) {
 652   2                      My_Read_Ds1302();
 653   2                      
 654   2                      num1 = 10;num2 = 10; num3 = 10;
 655   2                      num4 = ds1302_h / 10;
 656   2                      num5 = ds1302_h % 10;
 657   2                      num6=11;
 658   2                      num7=ds1302_s / 10, num8=ds1302_s % 10;
 659   2              }
 660   1      //      num1 = 2;num2 = 0; num3 = 2; num4 = 4;
 661   1      //      num5=num6=11;
 662   1      //      num7=num_s / 10, num8=num_s % 10;
 663   1              // =========================================== 代码结束 ======================================
 664   1              
 665   1              Display_SMG(num1,num2,num3,num4,num5,num6,num7,num8);//2ms刷新数码管
 666   1      }
 667          
 668          void ServiceUart() interrupt 4
 669          {
 670   1              if(RI == 1)
 671   1              {
 672   2                      RI = 0;//人工清零
 673   2                      urdat = SBUF;
C51 COMPILER V9.60.7.0   MAIN                                                              04/12/2024 21:12:55 PAGE 12  

 674   2                      command = SBUF;
 675   2      //              Send_Byte(urdat + 1);
 676   2      //              send_byte(0x5a);
 677   2      //              send_byte(0xa5);
 678   2              }
 679   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1766    ----
   CONSTANT SIZE    =     47    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     26      18
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
